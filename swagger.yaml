openapi: 3.0.0
info:
  title: MEN REST API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server
  - url: https://men-restful-api.onrender.com/api/
    description: Remote deployment on Render

tags:
  - name: Auth Routes
    description: Register and login
  - name: User Routes
    description: All user routes
  - name: Project Routes
    description: All project routes
  - name: Task Routes
    description: All task routes

components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    Project:
      type: object
      properties:
        title:
          type: string
        members:
          type: array
        ownerID:
          type: string
    
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    Task:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        assignedTo:
          type: string
        projectID:
          type: string
        state:
          type: string

paths:

  /user/register:
    post:
      tags: 
        - Auth Routes
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      tags: 
        - Auth Routes
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string


  /projects:
    get:
      tags: 
        - Project Routes
      summary: Retrieves a list of Projects
      description: Retrieves a list of projects as JSON objects.
      responses:
        200:
          description: A list of project JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

  /projects/new:
    post:
      tags: 
        - Project Routes
      summary: Create a new Project
      description: Create a new Project
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"

      responses:
        201:
          description: Project created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
  
  /projects/{id}:
    get:
      tags: 
        - Project Routes
      summary: Specific Project
      description: Retrieves a specific Project based on it id.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
      responses:
        200:
          description: A Project in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

  /projects/{userId}:
    get:
      tags: 
        - Project Routes
      summary: User Projects
      description: Retrieves Projects of a user.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          description: MongoDB userID
          schema:
            type: string
      responses:
        200:
          description: User projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

  /projects/add-member/{id}: 
    put:
      tags: 
        - Project Routes
      summary: Adds member to a Project
      description: Updates a specific Project by adding a member to it by id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string

      responses:
        200:
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /projects/members/{id}:
    get:
      tags: 
        - Project Routes
      summary: Project members
      description: Retrieves members of a Project.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
      responses:
        200:
          description: Members of Project.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

  /projects/members/{id}/{memberId}:
    get:
      tags: 
        - Project Routes
      summary: Get specific member of Project
      description: Retrieves a specific member of Project.
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
        - in: path
          name: memberId
          required: true
          description: MongoDB memberID of project
          schema:
            type: string
      responses:
        200:
          description: Member of a Project.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /projects/delete-member/{id}/{memberId}:
    delete:
      tags: 
        - Project Routes
      summary: Deletes a specific member of Project
      description: Deletes a specific member of Project based on its id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
        - in: path
          name: memberId
          required: true
          description: MongoDB memberID of project
          schema:
            type: string    
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string  

      responses:
        200:
          description: Member of Project deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /projects/delete/{id}:
    delete:
      tags: 
        - Project Routes
      summary: Deletes a specific Project
      description: Deletes a specific Project based on its id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string  

      responses:
        200:
          description: Project deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"

  /user/{id}:
    put:
      tags: 
        - User Routes
      summary: Update User by ID
      description: Update User by ID
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /user/updatePass/{id}:
    put:
      tags: 
        - User Routes
      summary: Update User password by ID
      description: Update User password by ID
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        200:
          description: User password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /user/{id}:
    get:
      tags: 
        - User Routes
      summary: Get User by ID
      description: Get User by ID
      security:
        - ApiKeyAuth: []      
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB userID
          schema:
            type: string  

      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /user/:
    get:
      tags: 
        - User Routes
      summary: Get all Users
      description: Get all Users
      security:
        - ApiKeyAuth: []      
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB userID
          schema:
            type: string  

      responses:
        200:
          description: Users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /tasks/:
    get:
      tags: 
        - Task Routes
      summary: Get all Tasks
      description: Get all Tasks
      security:
        - ApiKeyAuth: []      

      responses:
        200:
          description: Tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/new:
    post:
      tags: 
        - Task Routes
      summary: Create new Task
      description: Create new Task
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"

      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/get/{id}/{taskId}:
    get:
      tags: 
        - Task Routes
      summary: Get specific Task
      description: Get specific Task in project
      security:
        - ApiKeyAuth: []    
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
        - in: path
          name: taskId
          required: true
          description: MongoDB taskID in a project
          schema:
            type: string      

      responses:
        200:
          description: Task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}/user/{userId}:
    get:
      tags: 
        - Task Routes
      summary: Get Tasks of a User
      description: Get Tasks of a User
      security:
        - ApiKeyAuth: []    
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
        - in: path
          name: userId
          required: true
          description: MongoDB userID
          schema:
            type: string      

      responses:
        200:
          description: Tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}/{state}:
    get:
      tags: 
        - Task Routes
      summary: Get Tasks of a Project based on state
      description: Get Tasks of a Project based on state
      security:
        - ApiKeyAuth: []    
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB projectID
          schema:
            type: string
        - in: path
          name: state
          required: true
          description: ToDo/Doing/Done
          schema:
            type: string      

      responses:
        200:
          description: Tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/update/{id}:
    put:
      tags: 
        - Task Routes
      summary: Update Task
      description: Update Task
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB taskID
          schema:
            type: string     
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"

      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/updateState/{projectId}/{id}/{state}:
    put:
      tags: 
        - Task Routes
      summary: Update Task
      description: Update Task
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: path
          name: projectId
          required: true
          description: MongoDB projectID
          schema:
            type: string
        - in: path
          name: id
          required: true
          description: MongoDB taskID
          schema:
            type: string  
        - in: path
          name: state
          required: true
          description: ToDo/Doing/Done
          schema:
            type: string       

      responses:
        200:
          description: Task state updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/delete/{id}:
    delete:
      tags: 
        - Task Routes
      summary: Delete Task
      description: Delete Task by id
      security:
        - ApiKeyAuth: [] 
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB taskID
          schema:
            type: string     

      responses:
        200:
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"